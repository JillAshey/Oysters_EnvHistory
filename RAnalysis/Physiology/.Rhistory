#ggtitle("FRAP set1" - Set1") + # figure title
scale_y_continuous(expand = c(0,0), limits = c(0, 1.35)) + #making the bars sit right on the x axis-- no white space bt the bars and the actual axis
theme_minimal() + #setting the background theme
theme(axis.line = element_line(), axis.text.x = element_text(size = 10, angle=30, hjust = 1, colour = "black"), axis.text.y = element_text(size=10, color = "black"), axis.title.y = element_text(size = 12)) #adding specific lines, sizes, degrees, etc for the axes texts and labels
f_p1
##FRAP - set 2
ggplot(data = FRAP, aes(x=Site, y=FRAPavg2)) +
geom_bar(stat = "identity", position = "dodge", width = 0.75) +
geom_errorbar(aes(ymin = FRAPavg2 - FRAPse2, ymax = FRAPavg2 + FRAPse2), width = 0.2, position = position_dodge(0.75), size = 0.5) +
labs(x="", y="FRAP") +
ggtitle("Ferric reducing/antioxidant potential (μmol/g of tissue) set2") +
scale_y_continuous(expand = c(0,0)) +
theme_minimal() +
theme(axis.line = element_line(), axis.text.x = element_text(size = 12, angle = 30, hjust = 1, colour = "black"), axis.text.y = element_text(size=12, colour = "black"), axis.title.y = element_text(size = 15))
##delta FRAP
f_p2 = ggplot(FRAP, aes(x=Site, y=dFRAPavg)) + # establishing whats going on in plot
geom_bar(stat = "identity", color = "black", size = 0.3, width = 0.5) + # bar plot in these sizes, shapes, colors, etc
geom_errorbar(aes(x=Site, ymin = dFRAPavg - dFRAPse, ymax = dFRAPavg + dFRAPse), colour = "black", width = 0.1, alpha = 0.9, size = 0.5) + #error bar in specific size, shape, color, etc
geom_text(label = c("A", "B", "AB", "A"), aes(y = c(0.1, 0.05, 0.05, 0.21), x = Site), size = 4) + # adding letters to indicate significance
ylab("Change in ferric reducing/antioxidant potential (μmol/g of tissue)") + xlab("") + # x and y axes titles
#ggtitle("Delta Condition Index") + # figure title
geom_hline(aes(yintercept = 0)) + # making the bars sit flush with the x axis
scale_y_continuous(expand = c(0,0), limits = c(-0.4, 0.3)) +
theme_minimal() + # setting background theme
theme(axis.line.y = element_line(), axis.text.x = element_text(size = 10, angle=30, hjust = 1, colour = "black"), axis.text.y = element_text(size=10, color = "black"), axis.title.y = element_text(size = 12)) #adding specific lines, sizes, degrees, etc for the axes texts and labels
f_p2
# sig values: A, B, AB, A
ggsave("~/Desktop/PutnamLab/Repositories/Oysters_EnvHistory/output/Phys/HT_FRAP_Set1_delta_plot.pdf", FRAP_Plots, width = 8, height = 6)
##putting graphs into grid format
FRAP_Plots <- ggarrange(f_p1, f_p2, labels = c("A", "B"))
ggsave("~/Desktop/PutnamLab/Repositories/Oysters_EnvHistory/output/Phys/HT_FRAP_Set1_delta_plot.pdf", FRAP_Plots, width = 8, height = 6)
f_p1 = ggplot(FRAP, aes(x=Site, y=FRAPavg1)) + #establishing what's going on the plot
geom_bar(stat = "identity", color = "black", size = 0.3, width = 0.5) + # bar plot in these sizes, shapes, colors, etc
geom_errorbar(aes(ymin = FRAPavg1 - FRAPse1, ymax = FRAPavg1 + FRAPse1), width = 0.2, position = position_dodge(0.75), size = 0.5) +
ylab("Total antioxidant potential (μmol/g of tissue)") + xlab("") + # titles for x and y axes
#ggtitle("FRAP set1" - Set1") + # figure title
scale_y_continuous(expand = c(0,0), limits = c(0, 1.35)) + #making the bars sit right on the x axis-- no white space bt the bars and the actual axis
theme_minimal() + #setting the background theme
theme(axis.line = element_line(), axis.text.x = element_text(size = 10, angle=30, hjust = 1, colour = "black"), axis.text.y = element_text(size=10, color = "black"), axis.title.y = element_text(size = 12)) #adding specific lines, sizes, degrees, etc for the axes texts and labels
f_p1
##FRAP - set 2
ggplot(data = FRAP, aes(x=Site, y=FRAPavg2)) +
geom_bar(stat = "identity", position = "dodge", width = 0.75) +
geom_errorbar(aes(ymin = FRAPavg2 - FRAPse2, ymax = FRAPavg2 + FRAPse2), width = 0.2, position = position_dodge(0.75), size = 0.5) +
labs(x="", y="FRAP") +
ggtitle("Total antioxidant potential (μmol/g of tissue) set2") +
scale_y_continuous(expand = c(0,0)) +
theme_minimal() +
theme(axis.line = element_line(), axis.text.x = element_text(size = 12, angle = 30, hjust = 1, colour = "black"), axis.text.y = element_text(size=12, colour = "black"), axis.title.y = element_text(size = 15))
##delta FRAP
f_p2 = ggplot(FRAP, aes(x=Site, y=dFRAPavg)) + # establishing whats going on in plot
geom_bar(stat = "identity", color = "black", size = 0.3, width = 0.5) + # bar plot in these sizes, shapes, colors, etc
geom_errorbar(aes(x=Site, ymin = dFRAPavg - dFRAPse, ymax = dFRAPavg + dFRAPse), colour = "black", width = 0.1, alpha = 0.9, size = 0.5) + #error bar in specific size, shape, color, etc
geom_text(label = c("A", "B", "AB", "A"), aes(y = c(0.1, 0.05, 0.05, 0.21), x = Site), size = 4) + # adding letters to indicate significance
ylab("Change in total antioxidant potential (μmol/g of tissue)") + xlab("") + # x and y axes titles
#ggtitle("Delta Condition Index") + # figure title
geom_hline(aes(yintercept = 0)) + # making the bars sit flush with the x axis
scale_y_continuous(expand = c(0,0), limits = c(-0.4, 0.3)) +
theme_minimal() + # setting background theme
theme(axis.line.y = element_line(), axis.text.x = element_text(size = 10, angle=30, hjust = 1, colour = "black"), axis.text.y = element_text(size=10, color = "black"), axis.title.y = element_text(size = 12)) #adding specific lines, sizes, degrees, etc for the axes texts and labels
f_p2
# sig values: A, B, AB, A
##putting graphs into grid format
FRAP_Plots <- ggarrange(f_p1, f_p2, labels = c("A", "B"))
ggsave("~/Desktop/PutnamLab/Repositories/Oysters_EnvHistory/output/Phys/HT_FRAP_Set1_delta_plot.pdf", FRAP_Plots, width = 8, height = 6)
View(FRAP_Plots)
FRAP_Plots
# Load packages
library("DESeq2")
library("tidyverse")
library("dplyr")
library("pheatmap")
library("RColorBrewer")
library("genefilter")
library("ggplot2")
library("gplots")
library("limma")
library("spdep")
library("adegenet")
library("goseq")
library("forcats")
library("gridExtra")
library("GO.db")
## The gene ids in gcounts and DEG files are LOC terms. I need to use the ref file to assign the LOC terms to XM terms. Then I can use the length_pdam file!
# Import reference annotation gff file. This is from NCBI
ref <- read.csv("~/Desktop/GFFs/GCF_003704095.1_ASM370409v1_genomic.gff",header = FALSE, sep="\t", skip=6) # ref file from NCBI
# Obtain names of all expressed pdam genes (poverA = 0.85,5)
gcounts_filt_pdam <- read.csv("~/Desktop/PutnamLab/Repositories/SedimentStress/SedimentStress/Output/DESeq2/pdam/pdam_counts_filt.csv", header = TRUE) # read data in
dim(gcounts_filt_pdam) # 13881 rows x 13
#for ( col in 1:ncol(gcounts_filt_pdam)){
# colnames(gcounts_filt_pdam)[col] <-  gsub("X", "", colnames(gcounts_filt_pdam)[col]) # remove X in front of col names
#}
colnames(gcounts_filt_pdam)[1] <-"gene_id" # make colnames a true column called gene_id
head(gcounts_filt_pdam)
length(unique(gcounts_filt_pdam$gene_id)) # 13881 total unique gene ids
# Import file with DEGs for pdam
DEG_pdam <- read.csv("~/Desktop/pdam_unique.sig.list_20210326.csv", header = TRUE) # read in list of significant pdam genes
dim(DEG_pdam) # 549 x 13
#for ( col in 1:ncol(DEG_pdam)){
#   colnames(DEG_pdam)[col] <-  gsub("X", "", colnames(DEG_pdam)[col]) # remove X in front of col names
# }
colnames(DEG_pdam)[1] <-"gene_id" # make colnames a true column called gene_id
head(DEG_pdam)
length(unique(DEG_pdam$gene_id)) # 549 total unique gene ids
# Read in length data (calculated directly from transcripts) and merge with filtered counts
length_Plob <- read.csv("~/Desktop/length.mRNA_Pdam.csv")
View(length_Plob)
# Read in length data (calculated directly from transcripts) and merge with filtered counts
length_Plob <- read.csv("~/Desktop/length.mRNA_Pdam.csv", header = F)
# Read in length data (calculated directly from transcripts) and merge with filtered counts
length_Pdam <- read.csv("~/Desktop/length.mRNA_Pdam.csv", header = F)
colnames(length_Pdam)
# read in NCBI gff annotation file
pdamgff3_NCBI <- read.csv("~/Desktop/GFFs/GCF_003704095.1_ASM370409v1_genomic.gff.gz", header=FALSE, sep="\t", skip=6)
colnames(pdamgff3_NCBI) <- c("NCBI_scaffold", "Gene.Predict", "id", "gene.start","gene.stop", "pos1", "pos2","pos3", "gene") # name cols
pdamgff3_NCBI <- na.omit(pdamgff3_NCBI) # get rid of NAs, they are ### rows
dim(pdamgff3_NCBI) # 507906 x 9
View(pdamgff3_NCBI)
length(unique(pdamgff3_NCBI$NCBI_scaffold)) #4393 unique scaffolds
#pdamgff3_NCBI <- pdamgff3_NCBI[grep("LOC", pdamgff3_NCBI$gene),] # select only rows that have LOC term
pdamgff3_NCBI$gene_id <- gsub(".*LOC", "", pdamgff3_NCBI$gene) # the | symbol being really annoying in subsetting, so removing everything up to L, then will add L back to gene_id
pdamgff3_NCBI$gene_id <- sub(";.*", "", pdamgff3_NCBI$gene_id) # removing everything else in gene_id col
pdamgff3_NCBI$gene_id <- paste0("LOC", pdamgff3_NCBI$gene_id) # adding LOC back to beginning of term
length(unique(pdamgff3_NCBI$NCBI_scaffold)) #4393 unique scaffolds still
pdamgff3_NCBI <- pdamgff3_NCBI[!grepl("region", pdamgff3_NCBI$id)]
pdamgff3_NCBI <- pdamgff3_NCBI[!grepl("region", pdamgff3_NCBI$id),]
View(pdamgff3_NCBI)
head(pdamgff3_NCBI)
pdamgff3_NCBI_short <- select(c("NCBI_scaffold", "gene_id"), pdamgff3_NCBI)
pdamgff3_NCBI_short <- pdamgff3_NCBI[,c("NCBI_scaffold", "gene_id")]
View(pdamgff3_NCBI_short)
pdamgff3_NCBI_short <- unique(pdamgff3_NCBI_short)
write.csv(pdamgff3_NCBI_short, "~/Desktop/pdam_GeneNames_NCBI_LOC.csv")
length_Pdam <- read.csv("~/Desktop/length.mRNA_Pdam.csv", header = F)
colnames(length_Pdam) <- c("gene_id", "")
View(length_Pdam)
View(pdamgff3_NCBI)
write.csv(pdamgff3_NCBI, "~/Desktop/pdam_GeneNames_NCBI_LOC.csv")
# since length data had the XM, XP etc terms, I need to read in NCBI gff and merge so I can get the LOC terms
gff <- read.csv("~/Desktop/pdam_GeneNames_NCBI_LOC.csv", header = T)
View(gff)
pdamgff3_NCBI <- read.csv("~/Desktop/GFFs/GCF_003704095.1_ASM370409v1_genomic.gff.gz", header=FALSE, sep="\t", skip=6)
colnames(pdamgff3_NCBI) <- c("NCBI_scaffold", "Gene.Predict", "id", "gene.start","gene.stop", "pos1", "pos2","pos3", "gene") # name cols
pdamgff3_NCBI <- na.omit(pdamgff3_NCBI)
pdamgff3_NCBI$gene_id <- gsub(".*LOC", "", pdamgff3_NCBI$gene) # the | symbol being really annoying in subsetting, so removing everything up to L, then will add L back to gene_id
pdamgff3_NCBI$gene_id <- sub(";.*", "", pdamgff3_NCBI$gene_id) # removing everything else in gene_id col
pdamgff3_NCBI$gene_id <- paste0("LOC", pdamgff3_NCBI$gene_id) # adding LOC back to beginning of term
View(pdamgff3_NCBI)
pdamgff3_NCBI <- pdamgff3_NCBI[!grepl("region", pdamgff3_NCBI$id),] # remove 'region' id
View(pdamgff3_NCBI)
pdamgff3_NCBI$NCBI_id <- sub(";.*", "", pdamgff3_NCBI$gene) # removing everything else in gene_id col
pdamgff3_NCBI$NCBI_id <- sub("*.-", "", pdamgff3_NCBI$gene) # removing everything after the first ';'
# Read in length data (calculated directly from transcripts) and merge with filtered counts
length_Pdam <- read.csv("~/Desktop/length.mRNA_Pdam.csv", header = F)
colnames(length_Pdam) <- c("gene_id", "")
# since length data had the XM, XP etc terms, I need to read in NCBI gff and merge so I can get the LOC terms
pdamgff3_NCBI <- read.csv("~/Desktop/GFFs/GCF_003704095.1_ASM370409v1_genomic.gff.gz", header=FALSE, sep="\t", skip=6)
colnames(pdamgff3_NCBI) <- c("NCBI_scaffold", "Gene.Predict", "id", "gene.start","gene.stop", "pos1", "pos2","pos3", "gene") # name cols
pdamgff3_NCBI <- na.omit(pdamgff3_NCBI) # omit NAs
pdamgff3_NCBI$gene_id <- gsub(".*LOC", "", pdamgff3_NCBI$gene) # the | symbol being really annoying in subsetting, so removing everything up to L, then will add L back to gene_id
pdamgff3_NCBI$gene_id <- sub(";.*", "", pdamgff3_NCBI$gene_id) # removing everything else in gene_id col
pdamgff3_NCBI$gene_id <- paste0("LOC", pdamgff3_NCBI$gene_id) # adding LOC back to beginning of term
pdamgff3_NCBI <- pdamgff3_NCBI[!grepl("region", pdamgff3_NCBI$id),] # remove 'region' id
pdamgff3_NCBI$NCBI_id <- sub(";.*", "", pdamgff3_NCBI$gene) # removing everything after the first ';'
pdamgff3_NCBI$NCBI_id <- sub("*.-", "", pdamgff3_NCBI$NCBI_id) # removing everything after the first ';'
length_Pdam <- read.csv("~/Desktop/length.mRNA_Pdam.csv", header = F)
colnames(length_Pdam) <- c("gene_id", "")
# since length data had the XM, XP etc terms, I need to read in NCBI gff and merge so I can get the LOC terms
pdamgff3_NCBI <- read.csv("~/Desktop/GFFs/GCF_003704095.1_ASM370409v1_genomic.gff.gz", header=FALSE, sep="\t", skip=6)
colnames(pdamgff3_NCBI) <- c("NCBI_scaffold", "Gene.Predict", "id", "gene.start","gene.stop", "pos1", "pos2","pos3", "gene") # name cols
pdamgff3_NCBI <- na.omit(pdamgff3_NCBI) # omit NAs
pdamgff3_NCBI$gene_id <- gsub(".*LOC", "", pdamgff3_NCBI$gene) # the | symbol being really annoying in subsetting, so removing everything up to L, then will add L back to gene_id
pdamgff3_NCBI$gene_id <- sub(";.*", "", pdamgff3_NCBI$gene_id) # removing everything else in gene_id col
pdamgff3_NCBI$gene_id <- paste0("LOC", pdamgff3_NCBI$gene_id) # adding LOC back to beginning of term
pdamgff3_NCBI <- pdamgff3_NCBI[!grepl("region", pdamgff3_NCBI$id),] # remove 'region' id
pdamgff3_NCBI$NCBI_id <- sub(";.*", "", pdamgff3_NCBI$gene) # removing everything after the first ';'
pdamgff3_NCBI$NCBI_id <- sub(".*-", "", pdamgff3_NCBI$NCBI_id) # removing everything after the first ';'
# since length data had the XM, XP etc terms, I need to read in NCBI gff and merge so I can get the LOC terms
pdamgff3_NCBI <- read.csv("~/Desktop/GFFs/GCF_003704095.1_ASM370409v1_genomic.gff.gz", header=FALSE, sep="\t", skip=6)
colnames(pdamgff3_NCBI) <- c("NCBI_scaffold", "Gene.Predict", "id", "gene.start","gene.stop", "pos1", "pos2","pos3", "gene") # name cols
pdamgff3_NCBI <- na.omit(pdamgff3_NCBI) # omit NAs
pdamgff3_NCBI$gene_id <- gsub(".*LOC", "", pdamgff3_NCBI$gene) # the | symbol being really annoying in subsetting, so removing everything up to L, then will add L back to gene_id
pdamgff3_NCBI$gene_id <- sub(";.*", "", pdamgff3_NCBI$gene_id) # removing everything else in gene_id col
pdamgff3_NCBI$gene_id <- paste0("LOC", pdamgff3_NCBI$gene_id) # adding LOC back to beginning of term
pdamgff3_NCBI <- pdamgff3_NCBI[!grepl("region", pdamgff3_NCBI$id),] # remove 'region' id
pdamgff3_NCBI$NCBI_id <- sub(";.*", "", pdamgff3_NCBI$gene) # removing everything after the first ';'
pdamgff3_NCBI$NCBI_id <- sub(".*-", "", pdamgff3_NCBI$NCBI_id) # removing everything after the first ';'
View(length_Pdam)
length_Pdam <- read.csv("~/Desktop/length.mRNA_Pdam.csv", header = F)
colnames(length_Pdam) <- c("gene_id", "")
# since length data had the XM, XP etc terms, I need to read in NCBI gff and merge so I can get the LOC terms
pdamgff3_NCBI <- read.csv("~/Desktop/GFFs/GCF_003704095.1_ASM370409v1_genomic.gff.gz", header=FALSE, sep="\t", skip=6)
colnames(pdamgff3_NCBI) <- c("NCBI_scaffold", "Gene.Predict", "id", "gene.start","gene.stop", "pos1", "pos2","pos3", "gene") # name cols
pdamgff3_NCBI <- na.omit(pdamgff3_NCBI) # omit NAs
pdamgff3_NCBI$loc <- gsub(".*LOC", "", pdamgff3_NCBI$gene) # the | symbol being really annoying in subsetting, so removing everything up to L, then will add L back to gene_id
pdamgff3_NCBI$loc <- sub(";.*", "", pdamgff3_NCBI$loc) # removing everything else in gene_id col
pdamgff3_NCBI$loc <- paste0("LOC", pdamgff3_NCBI$loc) # adding LOC back to beginning of term
pdamgff3_NCBI <- pdamgff3_NCBI[!grepl("region", pdamgff3_NCBI$id),] # remove 'region' id
pdamgff3_NCBI$gene_id <- sub(";.*", "", pdamgff3_NCBI$gene_id) # removing everything after the first ';'
pdamgff3_NCBI$gene_id <- sub(".*-", "", pdamgff3_NCBI$gene_id) # removing everything after the first ';'
# Read in length data (calculated directly from transcripts) and merge with filtered counts
length_Pdam <- read.csv("~/Desktop/length.mRNA_Pdam.csv", header = F)
colnames(length_Pdam) <- c("gene_id", "")
# since length data had the XM, XP etc terms, I need to read in NCBI gff and merge so I can get the LOC terms
pdamgff3_NCBI <- read.csv("~/Desktop/GFFs/GCF_003704095.1_ASM370409v1_genomic.gff.gz", header=FALSE, sep="\t", skip=6)
colnames(pdamgff3_NCBI) <- c("NCBI_scaffold", "Gene.Predict", "id", "gene.start","gene.stop", "pos1", "pos2","pos3", "gene") # name cols
pdamgff3_NCBI <- na.omit(pdamgff3_NCBI) # omit NAs
pdamgff3_NCBI$loc <- gsub(".*LOC", "", pdamgff3_NCBI$gene) # the | symbol being really annoying in subsetting, so removing everything up to L, then will add L back to gene_id
pdamgff3_NCBI$loc <- sub(";.*", "", pdamgff3_NCBI$loc) # removing everything else in gene_id col
pdamgff3_NCBI$loc <- paste0("LOC", pdamgff3_NCBI$loc) # adding LOC back to beginning of term
pdamgff3_NCBI <- pdamgff3_NCBI[!grepl("region", pdamgff3_NCBI$id),] # remove 'region' id
pdamgff3_NCBI$gene_id <- sub(";.*", "", pdamgff3_NCBI$gene) # removing everything after the first ';'
pdamgff3_NCBI$gene_id <- sub(".*-", "", pdamgff3_NCBI$gene_id) # removing everything after the first ';'
# Now can merge NCBI w/ XM, XP terms with length data by LOC term
lemerge <- merge(length_Pdam, pdamgff3_NCBI, by = "gene_id")
View(lemerge)
pdamgff3_NCBI_test <- mutate(pdamgff3_NCBI, length = gene.stop - gene.start)
View(pdamgff3_NCBI_test)
pdamgff3_NCBI <- filter(pdamgff3_NCBI, id=="mRNA")
pdamgff3_NCBI <- mutate(pdamgff3_NCBI, length = gene.stop - gene.start)
length_Pdam <- read.csv("~/Desktop/length.mRNA_Pdam.csv", header = F)
colnames(length_Pdam) <- c("gene_id", "")
# since length data had the XM, XP etc terms, I need to read in NCBI gff and merge so I can get the LOC terms
pdamgff3_NCBI <- read.csv("~/Desktop/GFFs/GCF_003704095.1_ASM370409v1_genomic.gff.gz", header=FALSE, sep="\t", skip=6)
colnames(pdamgff3_NCBI) <- c("NCBI_scaffold", "Gene.Predict", "id", "gene.start","gene.stop", "pos1", "pos2","pos3", "gene") # name cols
pdamgff3_NCBI <- na.omit(pdamgff3_NCBI) # omit NAs
pdamgff3_NCBI <- filter(pdamgff3_NCBI, id=="mRNA")
pdamgff3_NCBI <- mutate(pdamgff3_NCBI, length = gene.stop - gene.start)
pdamgff3_NCBI$loc <- gsub(".*LOC", "", pdamgff3_NCBI$gene) # the | symbol being really annoying in subsetting, so removing everything up to L, then will add L back to gene_id
pdamgff3_NCBI$loc <- sub(";.*", "", pdamgff3_NCBI$loc) # removing everything else in gene_id col
pdamgff3_NCBI$loc <- paste0("LOC", pdamgff3_NCBI$loc) # adding LOC back to beginning of term
pdamgff3_NCBI <- pdamgff3_NCBI[!grepl("region", pdamgff3_NCBI$id),] # remove 'region' id
pdamgff3_NCBI <- pdamgff3_NCBI[!grepl("region", pdamgff3_NCBI$id),] # remove 'region' id
pdamgff3_NCBI$gene_id <- sub(";.*", "", pdamgff3_NCBI$gene) # removing everything after the first ';'
pdamgff3_NCBI$gene_id <- sub(".*-", "", pdamgff3_NCBI$gene_id) # removing everything after the first ';'
# Now can merge NCBI w/ XM, XP terms with length data by LOC term
colnames(pdamgff3_NCBI)
# remove certain columns from df
pdamgff3_NCBI <- pdamgff3_NCBI[,c("length", "loc")]
View(pdamgff3_NCBI)
colnames(pdamgff3_NCBI)[2] <-"gene_id" # switch loc col back to gene_id
#### Build GOSEQ vector
#GOseq requires a vector of all genes, all differentially expressed genes, and gene lengths
# Make DEG/gene vector
DEG <- filter(pdamgff3_NCBI, gene_id%in%DEG_pdam$gene_id) #make vector of differentially expressed genes
gcounts_filt_pdam <- read.csv("~/Desktop/PutnamLab/Repositories/SedimentStress/SedimentStress/Output/DESeq2/pdam/pdam_counts_filt.csv", header = TRUE) # read data in
dim(gcounts_filt_pdam) # 13881 rows x 13
#for ( col in 1:ncol(gcounts_filt_pdam)){
# colnames(gcounts_filt_pdam)[col] <-  gsub("X", "", colnames(gcounts_filt_pdam)[col]) # remove X in front of col names
#}
colnames(gcounts_filt_pdam)[1] <-"gene_id" # make colnames a true column called gene_id
head(gcounts_filt_pdam)
length(unique(gcounts_filt_pdam$gene_id)) # 13881 total unique gene ids
# Import file with DEGs for pdam
DEG_pdam <- read.csv("~/Desktop/pdam_unique.sig.list_20210326.csv", header = TRUE) # read in list of significant pdam genes
dim(DEG_pdam) # 549 x 13
#for ( col in 1:ncol(DEG_pdam)){
#   colnames(DEG_pdam)[col] <-  gsub("X", "", colnames(DEG_pdam)[col]) # remove X in front of col names
# }
colnames(DEG_pdam)[1] <-"gene_id" # make colnames a true column called gene_id
head(DEG_pdam)
length(unique(DEG_pdam$gene_id)) # 549 total unique gene ids
#### Build GOSEQ vector
#GOseq requires a vector of all genes, all differentially expressed genes, and gene lengths
# Make DEG/gene vector
DEG <- filter(pdamgff3_NCBI, gene_id%in%DEG_pdam$gene_id) #make vector of differentially expressed genes
dim(DEG) # 153 rows
DEG <- unique(DEG)
View(DEG)
View(DEG_pdam)
test <- merge(DEG, DEG_pdam, all.x = T)
View(test)
test <- merge(DEG_pdam, DEG, all.x = T)
View(test)
View(pdamgff3_NCBI_test)
# since length data had the XM, XP etc terms, I need to read in NCBI gff and merge so I can get the LOC terms
pdamgff3_NCBI <- read.csv("~/Desktop/GFFs/GCF_003704095.1_ASM370409v1_genomic.gff.gz", header=FALSE, sep="\t", skip=6)
colnames(pdamgff3_NCBI) <- c("NCBI_scaffold", "Gene.Predict", "id", "gene.start","gene.stop", "pos1", "pos2","pos3", "gene") # name cols
pdamgff3_NCBI <- na.omit(pdamgff3_NCBI) # omit NAs
#pdamgff3_NCBI <- filter(pdamgff3_NCBI, id=="mRNA")
pdamgff3_NCBI <- mutate(pdamgff3_NCBI, length = gene.stop - gene.start)
pdamgff3_NCBI$loc <- gsub(".*LOC", "", pdamgff3_NCBI$gene) # the | symbol being really annoying in subsetting, so removing everything up to L, then will add L back to gene_id
pdamgff3_NCBI$loc <- sub(";.*", "", pdamgff3_NCBI$loc) # removing everything else in gene_id col
pdamgff3_NCBI$loc <- paste0("LOC", pdamgff3_NCBI$loc) # adding LOC back to beginning of term
pdamgff3_NCBI <- pdamgff3_NCBI[!grepl("region", pdamgff3_NCBI$id),] # remove 'region' id
pdamgff3_NCBI <- pdamgff3_NCBI[!grepl("region", pdamgff3_NCBI$id),] # remove 'region' id
pdamgff3_NCBI$gene_id <- sub(";.*", "", pdamgff3_NCBI$gene) # removing everything after the first ';'
pdamgff3_NCBI$gene_id <- sub(".*-", "", pdamgff3_NCBI$gene_id) # removing everything after the first ';'
# remove certain columns from df
pdamgff3_NCBI <- pdamgff3_NCBI[,c("length", "loc")]
colnames(pdamgff3_NCBI)[2] <-"gene_id" # switch loc col back to gene_id
#### Build GOSEQ vector
#GOseq requires a vector of all genes, all differentially expressed genes, and gene lengths
# Make DEG/gene vector
DEG <- filter(pdamgff3_NCBI, gene_id%in%DEG_pdam$gene_id) #make vector of differentially expressed genes
dim(DEG) # 566 rows ??
View(DEG)
DEG <- unique(DEG)
View(DEG)
pdamgff3_NCBI <- read.csv("~/Desktop/GFFs/GCF_003704095.1_ASM370409v1_genomic.gff.gz", header=FALSE, sep="\t", skip=6)
colnames(pdamgff3_NCBI) <- c("NCBI_scaffold", "Gene.Predict", "id", "gene.start","gene.stop", "pos1", "pos2","pos3", "gene") # name cols
pdamgff3_NCBI <- na.omit(pdamgff3_NCBI) # omit NAs
#pdamgff3_NCBI <- filter(pdamgff3_NCBI, id=="mRNA")
pdamgff3_NCBI <- mutate(pdamgff3_NCBI, length = gene.stop - gene.start)
pdamgff3_NCBI$loc <- gsub(".*LOC", "", pdamgff3_NCBI$gene) # the | symbol being really annoying in subsetting, so removing everything up to L, then will add L back to gene_id
pdamgff3_NCBI$loc <- sub(";.*", "", pdamgff3_NCBI$loc) # removing everything else in gene_id col
pdamgff3_NCBI$loc <- paste0("LOC", pdamgff3_NCBI$loc) # adding LOC back to beginning of term
pdamgff3_NCBI <- pdamgff3_NCBI[!grepl("region", pdamgff3_NCBI$id),] # remove 'region' id
pdamgff3_NCBI <- pdamgff3_NCBI[!grepl("region", pdamgff3_NCBI$id),] # remove 'region' id
pdamgff3_NCBI$gene_id <- sub(";.*", "", pdamgff3_NCBI$gene) # removing everything after the first ';'
pdamgff3_NCBI$gene_id <- sub(".*-", "", pdamgff3_NCBI$gene_id) # removing everything after the first ';'
length(unique(pdamgff3_NCBI$loc))
View(gcounts_filt_pdam)
# make new df with length and gene id
pdamgff3_NCBI <- pdamgff3_NCBI[,c("length", "loc")]
colnames(pdamgff3_NCBI)[2] <-"gene_id" # switch loc col back to gene_id
pdamgff3_NCBI <- unique(pdamgff3_NCBI)
#### Build GOSEQ vector
#GOseq requires a vector of all genes, all differentially expressed genes, and gene lengths
# Make DEG/gene vector
DEG <- filter(pdamgff3_NCBI, gene_id%in%DEG_pdam$gene_id) #make vector of differentially expressed genes
dim(DEG) # 566 rows ??
DEG <- unique(DEG)
View(DEG)
pdamgff3_NCBI <- read.csv("~/Desktop/GFFs/GCF_003704095.1_ASM370409v1_genomic.gff.gz", header=FALSE, sep="\t", skip=6)
colnames(pdamgff3_NCBI) <- c("NCBI_scaffold", "Gene.Predict", "id", "gene.start","gene.stop", "pos1", "pos2","pos3", "gene") # name cols
pdamgff3_NCBI <- na.omit(pdamgff3_NCBI) # omit NAs
#pdamgff3_NCBI <- filter(pdamgff3_NCBI, id=="mRNA")
pdamgff3_NCBI <- mutate(pdamgff3_NCBI, length = gene.stop - gene.start)
pdamgff3_NCBI$loc <- gsub(".*LOC", "", pdamgff3_NCBI$gene) # the | symbol being really annoying in subsetting, so removing everything up to L, then will add L back to gene_id
pdamgff3_NCBI$loc <- sub(";.*", "", pdamgff3_NCBI$loc) # removing everything else in gene_id col
pdamgff3_NCBI$loc <- paste0("LOC", pdamgff3_NCBI$loc) # adding LOC back to beginning of term
pdamgff3_NCBI <- pdamgff3_NCBI[!grepl("region", pdamgff3_NCBI$id),] # remove 'region' id
pdamgff3_NCBI <- pdamgff3_NCBI[!grepl("region", pdamgff3_NCBI$id),] # remove 'region' id
pdamgff3_NCBI$gene_id <- sub(";.*", "", pdamgff3_NCBI$gene) # removing everything after the first ';'
pdamgff3_NCBI$gene_id <- sub(".*-", "", pdamgff3_NCBI$gene_id) # removing everything after the first ';'
View(pdamgff3_NCBI)
pdamgff3_NCBI <- filter(pdamgff3_NCBI, id=="gene")
# make new df with length and gene id
pdamgff3_NCBI <- pdamgff3_NCBI[,c("length", "loc")]
colnames(pdamgff3_NCBI)[2] <-"gene_id" # switch loc col back to gene_id
length(unique(pdamgff3_NCBI$gene_id))
#### Build GOSEQ vector
#GOseq requires a vector of all genes, all differentially expressed genes, and gene lengths
# Make DEG/gene vector
DEG <- filter(pdamgff3_NCBI, gene_id%in%DEG_pdam$gene_id) #make vector of differentially expressed genes
dim(DEG) # 566 rows ??
View(DEG_pdam)
test <- merge(DEG_pdam, pdamgff3_NCBI, all.x = T)
View(test)
# Read in length data (calculated directly from transcripts) and merge with filtered counts
# since length data had the XM, XP etc terms, I need to read in NCBI gff and merge so I can get the LOC terms
pdamgff3_NCBI <- read.csv("~/Desktop/GFFs/GCF_003704095.1_ASM370409v1_genomic.gff.gz", header=FALSE, sep="\t", skip=6)
colnames(pdamgff3_NCBI) <- c("NCBI_scaffold", "Gene.Predict", "id", "gene.start","gene.stop", "pos1", "pos2","pos3", "gene") # name cols
pdamgff3_NCBI <- na.omit(pdamgff3_NCBI) # omit NAs
#pdamgff3_NCBI <- filter(pdamgff3_NCBI, id=="mRNA")
pdamgff3_NCBI <- mutate(pdamgff3_NCBI, length = gene.stop - gene.start)
pdamgff3_NCBI$loc <- gsub(".*LOC", "", pdamgff3_NCBI$gene) # the | symbol being really annoying in subsetting, so removing everything up to L, then will add L back to gene_id
pdamgff3_NCBI$loc <- sub(";.*", "", pdamgff3_NCBI$loc) # removing everything else in gene_id col
pdamgff3_NCBI$loc <- paste0("LOC", pdamgff3_NCBI$loc) # adding LOC back to beginning of term
pdamgff3_NCBI <- pdamgff3_NCBI[!grepl("region", pdamgff3_NCBI$id),] # remove 'region' id
pdamgff3_NCBI <- pdamgff3_NCBI[!grepl("region", pdamgff3_NCBI$id),] # remove 'region' id
pdamgff3_NCBI$gene_id <- sub(";.*", "", pdamgff3_NCBI$gene) # removing everything after the first ';'
pdamgff3_NCBI$gene_id <- sub(".*-", "", pdamgff3_NCBI$gene_id) # removing everything after the first ';'
pdamgff3_NCBI_gene <- filter(pdamgff3_NCBI, id=="gene")
pdamgff3_NCBI_gene <- filter(pdamgff3_NCBI, id==c("gene", "pseudogene"))
# Read in length data (calculated directly from transcripts) and merge with filtered counts
# since length data had the XM, XP etc terms, I need to read in NCBI gff and merge so I can get the LOC terms
pdamgff3_NCBI <- read.csv("~/Desktop/GFFs/GCF_003704095.1_ASM370409v1_genomic.gff.gz", header=FALSE, sep="\t", skip=6)
colnames(pdamgff3_NCBI) <- c("NCBI_scaffold", "Gene.Predict", "id", "gene.start","gene.stop", "pos1", "pos2","pos3", "gene") # name cols
pdamgff3_NCBI <- na.omit(pdamgff3_NCBI) # omit NAs
#pdamgff3_NCBI <- filter(pdamgff3_NCBI, id=="mRNA")
pdamgff3_NCBI <- mutate(pdamgff3_NCBI, length = gene.stop - gene.start)
pdamgff3_NCBI$loc <- gsub(".*LOC", "", pdamgff3_NCBI$gene) # the | symbol being really annoying in subsetting, so removing everything up to L, then will add L back to gene_id
pdamgff3_NCBI$loc <- sub(";.*", "", pdamgff3_NCBI$loc) # removing everything else in gene_id col
pdamgff3_NCBI$loc <- paste0("LOC", pdamgff3_NCBI$loc) # adding LOC back to beginning of term
pdamgff3_NCBI <- pdamgff3_NCBI[!grepl("region", pdamgff3_NCBI$id),] # remove 'region' id
pdamgff3_NCBI <- pdamgff3_NCBI[!grepl("region", pdamgff3_NCBI$id),] # remove 'region' id
pdamgff3_NCBI$gene_id <- sub(";.*", "", pdamgff3_NCBI$gene) # removing everything after the first ';'
pdamgff3_NCBI$gene_id <- sub(".*-", "", pdamgff3_NCBI$gene_id) # removing everything after the first ';'
pdamgff3_NCBI_gene <- filter(pdamgff3_NCBI, id==c("gene", "pseudogene"))
pdamgff3_NCBI_gene <- filter(pdamgff3_NCBI, id==c("gene"&"pseudogene"))
pdamgff3_NCBI_gene <- pdamgff3_NCBI_gene %>% filter(id =="gene", id=="pseudogene")
View(pdamgff3_NCBI_test)
pdamgff3_NCBI_gene <- pdamgff3_NCBI_gene %>% filter(id =="gene" & id=="pseudogene")
pdamgff3_NCBI <- read.csv("~/Desktop/GFFs/GCF_003704095.1_ASM370409v1_genomic.gff.gz", header=FALSE, sep="\t", skip=6)
colnames(pdamgff3_NCBI) <- c("NCBI_scaffold", "Gene.Predict", "id", "gene.start","gene.stop", "pos1", "pos2","pos3", "gene") # name cols
pdamgff3_NCBI <- na.omit(pdamgff3_NCBI) # omit NAs
#pdamgff3_NCBI <- filter(pdamgff3_NCBI, id=="mRNA")
pdamgff3_NCBI <- mutate(pdamgff3_NCBI, length = gene.stop - gene.start)
pdamgff3_NCBI$loc <- gsub(".*LOC", "", pdamgff3_NCBI$gene) # the | symbol being really annoying in subsetting, so removing everything up to L, then will add L back to gene_id
pdamgff3_NCBI$loc <- sub(";.*", "", pdamgff3_NCBI$loc) # removing everything else in gene_id col
pdamgff3_NCBI$loc <- paste0("LOC", pdamgff3_NCBI$loc) # adding LOC back to beginning of term
pdamgff3_NCBI <- pdamgff3_NCBI[!grepl("region", pdamgff3_NCBI$id),] # remove 'region' id
pdamgff3_NCBI <- pdamgff3_NCBI[!grepl("region", pdamgff3_NCBI$id),] # remove 'region' id
pdamgff3_NCBI$gene_id <- sub(";.*", "", pdamgff3_NCBI$gene) # removing everything after the first ';'
pdamgff3_NCBI$gene_id <- sub(".*-", "", pdamgff3_NCBI$gene_id) # removing everything after the first ';'
pdamgff3_NCBI_gene <- filter(pdamgff3_NCBI, id==c("gene"))
pdamgff3_NCBI_gene <- pdamgff3_NCBI_gene %>% filter(id =="gene" & id=="pseudogene")
pdamgff3_NCBI_gene<- subset(pdamgff3_NCBI_gene, id =="gene" & id=="pseudogene")
pdamgff3_NCBI_gene<- subset(pdamgff3_NCBI_gene, id =="gene" | id=="pseudogene")
pdamgff3_NCBI_gene<- subset(pdamgff3_NCBI, id =="gene" | id=="pseudogene")
View(pdamgff3_NCBI_gene)
# make new df with length and gene id
pdamgff3_NCBI_gene <- pdamgff3_NCBI_gene[,c("length", "loc")]
colnames(pdamgff3_NCBI_gene)[2] <-"gene_id" # switch loc col back to gene_id
pdamgff3_NCBI_gene <- unique(pdamgff3_NCBI_gene)
#### Build GOSEQ vector
#GOseq requires a vector of all genes, all differentially expressed genes, and gene lengths
# Make DEG/gene vector
DEG <- filter(pdamgff3_NCBI_gene, gene_id%in%DEG_pdam$gene_id) #make vector of differentially expressed genes
dim(DEG) # 566 rows ??
DEG <- unique(DEG)
DEG_names <- as.vector(DEG$gene_id)
gene_vector=as.integer(length_merge$gene_id%in%DEG_names)
gene_vector=as.integer(pdamgff3_NCBI_gene$gene_id%in%DEG_names)
# Merge pdamgff3_NCBI_gene with DEG_pdam to subset DEGs from larger df
length_merge <- merge(DEG_pdam, pdamgff3_NCBI_gene)
View(length_merge)
#### Build GOSEQ vector
#GOseq requires a vector of all genes, all differentially expressed genes, and gene lengths
# Make DEG/gene vector
DEG <- filter(length_merge, gene_id%in%DEG_pdam$gene_id) #make vector of differentially expressed genes
dim(DEG) # 549 rows ??
DEG_names <- as.vector(DEG$gene_id)
gene_vector=as.integer(length_merge$gene_id%in%DEG_names)
names(gene_vector)=length_merge$gene_id
# Make ID vector
IDvector <- length_merge$gene_id
# Make length vector
lengthVector <- length_merge$length
# Calculate Probability Weighting Function
DEG.pwf<-nullp(gene_vector, IDvector, bias.data=lengthVector) #weight vector by length of gene
gene_vector
# make new df with length and gene id
pdamgff3_NCBI_gene <- pdamgff3_NCBI_gene[,c("length", "loc")]
colnames(pdamgff3_NCBI_gene)[2] <-"gene_id" # switch loc col back to gene_id
pdamgff3_NCBI_gene <- unique(pdamgff3_NCBI_gene)
# Read in length data (calculated directly from transcripts) and merge with filtered counts
# since length data had the XM, XP etc terms, I need to read in NCBI gff and merge so I can get the LOC terms
pdamgff3_NCBI <- read.csv("~/Desktop/GFFs/GCF_003704095.1_ASM370409v1_genomic.gff.gz", header=FALSE, sep="\t", skip=6)
colnames(pdamgff3_NCBI) <- c("NCBI_scaffold", "Gene.Predict", "id", "gene.start","gene.stop", "pos1", "pos2","pos3", "gene") # name cols
pdamgff3_NCBI <- na.omit(pdamgff3_NCBI) # omit NAs
#pdamgff3_NCBI <- filter(pdamgff3_NCBI, id=="mRNA")
pdamgff3_NCBI <- mutate(pdamgff3_NCBI, length = gene.stop - gene.start)
pdamgff3_NCBI$loc <- gsub(".*LOC", "", pdamgff3_NCBI$gene) # the | symbol being really annoying in subsetting, so removing everything up to L, then will add L back to gene_id
pdamgff3_NCBI$loc <- sub(";.*", "", pdamgff3_NCBI$loc) # removing everything else in gene_id col
pdamgff3_NCBI$loc <- paste0("LOC", pdamgff3_NCBI$loc) # adding LOC back to beginning of term
pdamgff3_NCBI <- pdamgff3_NCBI[!grepl("region", pdamgff3_NCBI$id),] # remove 'region' id
pdamgff3_NCBI <- pdamgff3_NCBI[!grepl("region", pdamgff3_NCBI$id),] # remove 'region' id
pdamgff3_NCBI$gene_id <- sub(";.*", "", pdamgff3_NCBI$gene) # removing everything after the first ';'
pdamgff3_NCBI$gene_id <- sub(".*-", "", pdamgff3_NCBI$gene_id) # removing everything after the first ';'
pdamgff3_NCBI_gene<- subset(pdamgff3_NCBI, id =="gene" | id=="pseudogene")
# make new df with length and gene id
pdamgff3_NCBI_gene <- pdamgff3_NCBI_gene[,c("length", "loc")]
colnames(pdamgff3_NCBI_gene)[2] <-"gene_id" # switch loc col back to gene_id
pdamgff3_NCBI_gene <- unique(pdamgff3_NCBI_gene)
#### Build GOSEQ vector
#GOseq requires a vector of all genes, all differentially expressed genes, and gene lengths
# Make DEG/gene vector
DEG <- filter(pdamgff3_NCBI_gene, gene_id%in%DEG_pdam$gene_id) #make vector of differentially expressed genes
dim(DEG) # 549 rows ??
DEG_names <- as.vector(DEG$gene_id)
gene_vector=as.integer(pdamgff3_NCBI_gene$gene_id%in%DEG_names)
names(gene_vector)=pdamgff3_NCBI_gene$gene_id
# Make ID vector
IDvector <- pdamgff3_NCBI_gene$gene_id
# Make length vector
lengthVector <- pdamgff3_NCBI_gene$length
# Calculate Probability Weighting Function
DEG.pwf<-nullp(gene_vector, IDvector, bias.data=lengthVector) #weight vector by length of gene
## old GO terms (not my annots)
annot_GO <- read.csv("~/Desktop/PutnamLab/Repositories/SedimentStress/SedimentStress/Output/GOseq/pdam/pdam_GO_20210125.csv", header=TRUE)
View(annot_GO)
annot_GO <- select(annot_GO, -X)
annot_GO <- select(annot_GO, -X)
# Load packages
library("DESeq2")
library("tidyverse")
library("dplyr")
library("pheatmap")
library("RColorBrewer")
library("genefilter")
library("ggplot2")
library("gplots")
library("limma")
library("spdep")
library("adegenet")
library("goseq")
library("forcats")
library("gridExtra")
library("GO.db")
annot_GO <- select(annot_GO, -X)
search()
rm(list = ls())
library("DESeq2")
library("tidyverse")
library("dplyr")
library("pheatmap")
library("RColorBrewer")
library("genefilter")
library("ggplot2")
library("gplots")
library("limma")
library("spdep")
library("adegenet")
library("goseq")
library("forcats")
library("gridExtra")
library("GO.db")
rm(list = ls())
search()
