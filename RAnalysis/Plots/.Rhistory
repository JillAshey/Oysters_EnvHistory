View(dat1)
head(dat1)
MR = subset(dat1, Site=="Merroir")
MR_gly_mean = mean(MR$P_Glycogen_DW)
MR_gly_se = std.error(MR$P_Glycogen_DW)
PR = subset(dat1, Site=="Piankatank")
PR_gly_mean = mean(PR$P_Glycogen_DW)
PR_gly_se = std.error(PR$P_Glycogen_DW)
UC = subset(dat1, Site=="Urbana Creek")
UC_gly_mean = mean(UC$P_Glycogen_DW)
UC_gly_se = std.error(UC$P_Glycogen_DW)
VP = subset(dat1, Site=="VIMS Pier")
VP_gly_mean = mean(VP$P_Glycogen_DW)
VP_gly_se = std.error(VP$P_Glycogen_DW)
#install.packages("ggpubr")
library(devtools)
library(ggplot2)
library(ggpubr)
library(gridExtra)
library("plotrix")
library("tidyverse")
MR = subset(dat1, Site=="Merroir")
MR_gly_mean = mean(MR$P_Glycogen_DW)
MR_gly_se = std.error(MR$P_Glycogen_DW)
PR = subset(dat1, Site=="Piankatank")
PR_gly_mean = mean(PR$P_Glycogen_DW)
PR_gly_se = std.error(PR$P_Glycogen_DW)
UC = subset(dat1, Site=="Urbana Creek")
UC_gly_mean = mean(UC$P_Glycogen_DW)
UC_gly_se = std.error(UC$P_Glycogen_DW)
VP = subset(dat1, Site=="VIMS Pier")
VP_gly_mean = mean(VP$P_Glycogen_DW)
VP_gly_se = std.error(VP$P_Glycogen_DW)
#make a data frame with the name (categorical variable - Site), the values (average of physiological measurements from each site),
#and se (standard error for each site)
set1Gly = data.frame(name=c("Merroir", "Piankatank", "Urbanna Creek", "VIMS Pier"),
value = c(MR_gly_mean, PR_gly_mean, UC_gly_mean, VP_gly_mean), # mean
se = c(MR_gly_se, PR_gly_se, UC_gly_se, VP_gly_se)) # standard error
#Bar plot for glycogenSet1
p1 = ggplot(set1Gly, aes(x=name, y=value)) + #establishing what's going on the plot
geom_bar(stat = "identity", fill="gray", color = "black", size = 0.3, width = 0.5) + #its going to be a bar plot in these sizes, shapes, colors, etc
geom_errorbar(aes(x=name, ymin = value - se, ymax = value + se), colour = "black", width = 0.1, alpha = 0.9, size = 0.5) + #error bars in specific size, shape, color, etc
ylab("Glycogen (% of DW)") + xlab("") + #x and y axes titles
#ggtitle("Glycogen - Set1") + #title
scale_y_continuous(expand = c(0,0)) + #making the bars sit right on the x axis-- no white space bt the bars and the actual axis
theme_minimal() + #setting the background theme
theme(axis.line = element_line(), axis.text.x = element_text(size = 10, angle=30, hjust = 1, colour = "black"), axis.text.y = element_text(size=10, color = "black"), axis.title.y = element_text(size = 12)) #adding specific lines, sizes, degrees, etc for the axes texts and labels
p1
#reading in data
dat2 = read.csv(file="~/Desktop/PutnamLab/Repositories/Oysters_EnvHistory/data/Physiology_WQ/HT_PhysWQ_Set1_051620.csv", header=TRUE)
View(dat2)
##Glycogen set 2
# calculate glycogen set 2 mean and se from dat2
MR2 = subset(dat2, Site=="Merroir")
MR2_gly_mean = mean(MR2$P_Glycogen_DW)
MR2_gly_se = std.error(MR2$P_Glycogen_DW)
PR2 = subset(dat2, Site=="Piankatank")
PR2_gly_mean = mean(PR2$P_Glycogen_DW)
PR2_gly_se = std.error(PR2$P_Glycogen_DW)
UC2 = subset(dat2, Site=="Urbana Creek")
UC2_gly_mean = mean(UC2$P_Glycogen_DW)
UC2_gly_se = std.error(UC2$P_Glycogen_DW)
VP2 = subset(dat2, Site=="VIMS Pier")
VP2_gly_mean = mean(VP2$P_Glycogen_DW)
VP2_gly_se = std.error(VP2$P_Glycogen_DW)
#make a data frame with the name (categorical variable - Site), the values (average of physiological measurements from each site),
#and se (standard error for each site)
set2Gly = data.frame(name=c("Merroir", "Piankatank", "Urbanna Creek", "VIMS Pier"),
value = c(MR2_gly_mean, PR2_gly_mean, UC2_gly_mean, VP2_gly_mean), # mean
se = c(MR2_gly_se, PR2_gly_se, UC2_gly_se, VP2_gly_se)) # std error
#bar plot for glycogen set 2
ggplot(set2Gly, aes(x=name, y=value)) + # establishes whats going on in plot
geom_bar(stat = "identity", fill="gray", color = "black", size = 0.3, width = 0.75) + # bar plot in these sizes, shapes, colors, etc
geom_errorbar(aes(x=name, ymin = value - se, ymax = value + se), colour = "black", width = 0.1, alpha = 0.9, size = 0.5) + #error bar in specific size, shape, color, etc
ylab("Glycogen Content") + xlab("") + # titles for x and y axes
ggtitle("Glycogen - Set2") + # figure title
scale_y_continuous(expand = c(0,0)) + # making the bars sit flush with the x axis
theme_minimal() + # setting background theme
theme(axis.line = element_line(), axis.text.x = element_text(size = 12, angle=30, hjust = 1, colour = "black"), axis.text.y = element_text(size=12, color = "black"), axis.title.y = element_text(size = 15)) #adding specific lines, sizes, degrees, etc for the axes texts and labels
#reading in data
dat2 = read.csv(file="~/Desktop/PutnamLab/Repositories/Oysters_EnvHistory/data/Physiology_WQ/HT_PhysWQ_Set2_051620.csv", header=TRUE)
View(dat2)
##Glycogen set 2
# calculate glycogen set 2 mean and se from dat2
MR2 = subset(dat2, Site=="Merroir")
MR2_gly_mean = mean(MR2$P_Glycogen_DW)
MR2_gly_se = std.error(MR2$P_Glycogen_DW)
PR2 = subset(dat2, Site=="Piankatank")
PR2_gly_mean = mean(PR2$P_Glycogen_DW)
PR2_gly_se = std.error(PR2$P_Glycogen_DW)
UC2 = subset(dat2, Site=="Urbana Creek")
UC2_gly_mean = mean(UC2$P_Glycogen_DW)
UC2_gly_se = std.error(UC2$P_Glycogen_DW)
VP2 = subset(dat2, Site=="VIMS Pier")
VP2_gly_mean = mean(VP2$P_Glycogen_DW)
VP2_gly_se = std.error(VP2$P_Glycogen_DW)
#make a data frame with the name (categorical variable - Site), the values (average of physiological measurements from each site),
#and se (standard error for each site)
set2Gly = data.frame(name=c("Merroir", "Piankatank", "Urbanna Creek", "VIMS Pier"),
value = c(MR2_gly_mean, PR2_gly_mean, UC2_gly_mean, VP2_gly_mean), # mean
se = c(MR2_gly_se, PR2_gly_se, UC2_gly_se, VP2_gly_se)) # std error
#bar plot for glycogen set 2
ggplot(set2Gly, aes(x=name, y=value)) + # establishes whats going on in plot
geom_bar(stat = "identity", fill="gray", color = "black", size = 0.3, width = 0.75) + # bar plot in these sizes, shapes, colors, etc
geom_errorbar(aes(x=name, ymin = value - se, ymax = value + se), colour = "black", width = 0.1, alpha = 0.9, size = 0.5) + #error bar in specific size, shape, color, etc
ylab("Glycogen Content") + xlab("") + # titles for x and y axes
ggtitle("Glycogen - Set2") + # figure title
scale_y_continuous(expand = c(0,0)) + # making the bars sit flush with the x axis
theme_minimal() + # setting background theme
theme(axis.line = element_line(), axis.text.x = element_text(size = 12, angle=30, hjust = 1, colour = "black"), axis.text.y = element_text(size=12, color = "black"), axis.title.y = element_text(size = 15)) #adding specific lines, sizes, degrees, etc for the axes texts and labels
#bar plot for glycogen set 2
ggplot(set2Gly, aes(x=name, y=value)) + # establishes whats going on in plot
geom_bar(stat = "identity", fill="gray", color = "black", size = 0.3, width = 0.5) + # bar plot in these sizes, shapes, colors, etc
geom_errorbar(aes(x=name, ymin = value - se, ymax = value + se), colour = "black", width = 0.1, alpha = 0.9, size = 0.5) + #error bar in specific size, shape, color, etc
ylab("Glycogen (% of DW)") + xlab("") + #x and y axes titles
#ggtitle("Glycogen - Set2") + # figure title
scale_y_continuous(expand = c(0,0)) + # making the bars sit flush with the x axis
theme_minimal() + # setting background theme
theme(axis.line = element_line(), axis.text.x = element_text(size = 12, angle=30, hjust = 1, colour = "black"), axis.text.y = element_text(size=12, color = "black"), axis.title.y = element_text(size = 15)) #adding specific lines, sizes, degrees, etc for the axes texts and labels
#bar plot for glycogen set 2
p_GlySet2 <- ggplot(set2Gly, aes(x=name, y=value)) + # establishes whats going on in plot
geom_bar(stat = "identity", fill="gray", color = "black", size = 0.3, width = 0.5) + # bar plot in these sizes, shapes, colors, etc
geom_errorbar(aes(x=name, ymin = value - se, ymax = value + se), colour = "black", width = 0.1, alpha = 0.9, size = 0.5) + #error bar in specific size, shape, color, etc
ylab("Glycogen (% of DW)") + xlab("") + #x and y axes titles
#ggtitle("Glycogen - Set2") + # figure title
scale_y_continuous(expand = c(0,0)) + # making the bars sit flush with the x axis
theme_minimal() + # setting background theme
theme(axis.line = element_line(), axis.text.x = element_text(size = 12, angle=30, hjust = 1, colour = "black"), axis.text.y = element_text(size=12, color = "black"), axis.title.y = element_text(size = 15)) #adding specific lines, sizes, degrees, etc for the axes texts and labels
ggsave("~/Desktop/PutnamLab/Repositories/Oysters_EnvHistory/output/Phys/HT_Glycogen_Set2.pdf", p_GlySet2, width = 8, height = 6)
MR2_CI_mean = mean(MR2$ConditionIndex)
MR2_CI_se = std.error(MR2$ConditionIndex)
PR2_CI_mean = mean(PR2$ConditionIndex)
PR2_CI_se = std.error(PR2$ConditionIndex)
UC2_CI_mean = mean(UC2$ConditionIndex)
UC2_CI_se = std.error(UC2$ConditionIndex)
VP2_CI_mean = mean(VP2$ConditionIndex)
VP2_CI_se = std.error(VP2$ConditionIndex)
#make a data frame with the name (categorical variable - Site), the values (average of physiological measurements from each site),
#and se (standard error for each site)
set2CI = data.frame(name=c("Merroir", "Piankatank", "Urbanna Creek", "VIMS Pier"),
value = c(MR2_CI_mean, PR2_CI_mean, UC2_CI_mean, VP2_CI_mean), # mean
se = c(MR2_CI_se, PR2_CI_se, UC2_CI_se, VP2_CI_se)) # std error
#Bar plot of CI set2
p_CISet2 <- ggplot(set2CI, aes(x=name, y=value)) + # establishing whats going on in plot
geom_bar(stat = "identity", fill="gray", color = "black", size = 0.3, width = 0.5) +  # bar plot in these sizes, shapes, colors, etc
geom_errorbar(aes(x=name, ymin = value - se, ymax = value + se), colour = "black", width = 0.1, alpha = 0.9, size = 0.5) + #error bar in specific size, shape, color, etc
ylab("Condition Index") + xlab("") + # x and y axes titles
ggtitle("Condition Index Set2") + # figure title
scale_y_continuous(expand = c(0,0)) + # making the bars sit flush with the x axis
theme_minimal() + # setting background theme
theme(axis.line = element_line(), axis.text.x = element_text(size = 12, angle=30, hjust = 1, colour = "black"), axis.text.y = element_text(size=12, color = "black"), axis.title.y = element_text(size = 15)) #adding specific lines, sizes, degrees, etc for the axes texts and labels
p_CISet2
#Bar plot of CI set2
p_CISet2 <- ggplot(set2CI, aes(x=name, y=value)) + # establishing whats going on in plot
geom_bar(stat = "identity", fill="gray", color = "black", size = 0.3, width = 0.5) +  # bar plot in these sizes, shapes, colors, etc
geom_errorbar(aes(x=name, ymin = value - se, ymax = value + se), colour = "black", width = 0.1, alpha = 0.9, size = 0.5) + #error bar in specific size, shape, color, etc
ylab("Condition Index") + xlab("") + # x and y axes titles
#ggtitle("Condition Index Set2") + # figure title
scale_y_continuous(expand = c(0,0)) + # making the bars sit flush with the x axis
theme_minimal() + # setting background theme
theme(axis.line = element_line(), axis.text.x = element_text(size = 12, angle=30, hjust = 1, colour = "black"), axis.text.y = element_text(size=12, color = "black"), axis.title.y = element_text(size = 15)) #adding specific lines, sizes, degrees, etc for the axes texts and labels
p_CISet2
ggsave("~/Desktop/PutnamLab/Repositories/Oysters_EnvHistory/output/Phys/HT_ConditionIndex_Set2.pdf", p_CISet2, width = 8, height = 6)
##FRAP - set 1
##only need the averages for the plots
#Load data file with only avg and SE for each site. If I need all the points I can use HT_FRAP_bothSets_042320.csv
FRAP <- read.csv("~/Desktop/PutnamLab/Repositories/Oysters_EnvHistory/data/FRAP/HT_FRAP_Siteavgs_043020.csv")
View(FRAP)
##FRAP - set 2
ggplot(data = FRAP, aes(x=Site, y=FRAPavg2)) +
geom_bar(stat = "identity", position = "dodge", width = 0.75) +
geom_errorbar(aes(ymin = FRAPavg2 - FRAPse2, ymax = FRAPavg2 + FRAPse2), width = 0.2, position = position_dodge(0.75), size = 0.5) +
labs(x="", y="FRAP") +
ggtitle("Total antioxidant potential (μmol/g of tissue) set2") +
scale_y_continuous(expand = c(0,0)) +
theme_minimal() +
theme(axis.line = element_line(), axis.text.x = element_text(size = 12, angle = 30, hjust = 1, colour = "black"), axis.text.y = element_text(size=12, colour = "black"), axis.title.y = element_text(size = 15))
##FRAP - set 2
ggplot(data = FRAP, aes(x=Site, y=FRAPavg2)) +
geom_bar(stat = "identity", position = "dodge", width = 0.75) +
geom_errorbar(aes(ymin = FRAPavg2 - FRAPse2, ymax = FRAPavg2 + FRAPse2), width = 0.2, position = position_dodge(0.75), size = 0.5) +
ylab("Total antioxidant potential (μmol/g of tissue)") + xlab("") + # titles for x and y axes
#ggtitle("Total antioxidant potential (μmol/g of tissue) set2") +
scale_y_continuous(expand = c(0,0)) +
theme_minimal() +
theme(axis.line = element_line(), axis.text.x = element_text(size = 12, angle = 30, hjust = 1, colour = "black"), axis.text.y = element_text(size=12, colour = "black"), axis.title.y = element_text(size = 15))
##FRAP - set 2
p_FRAPSet2 <- ggplot(data = FRAP, aes(x=Site, y=FRAPavg2)) +
geom_bar(stat = "identity", position = "dodge", width = 0.75) +
geom_errorbar(aes(ymin = FRAPavg2 - FRAPse2, ymax = FRAPavg2 + FRAPse2), width = 0.2, position = position_dodge(0.75), size = 0.5) +
ylab("Total antioxidant potential (μmol/g of tissue)") + xlab("") + # titles for x and y axes
#ggtitle("Total antioxidant potential (μmol/g of tissue) set2") +
scale_y_continuous(expand = c(0,0)) +
theme_minimal() +
theme(axis.line = element_line(), axis.text.x = element_text(size = 12, angle = 30, hjust = 1, colour = "black"), axis.text.y = element_text(size=12, colour = "black"), axis.title.y = element_text(size = 15))
p_FRAPSet2
ggsave("~/Desktop/PutnamLab/Repositories/Oysters_EnvHistory/output/Phys/HT_FRAP_Set2.pdf", p_FRAPSet2, width = 8, height = 6)
#######Set 2
#load data in
set2<-read.csv("~/Desktop/PutnamLab/Repositories/Oysters_EnvHistory/data/Glycogen/CI/HT_CIGly_Set2.csv", head=T)
#######Set 2
#load data in
set2<-read.csv("~/Desktop/PutnamLab/Repositories/Oysters_EnvHistory/data/Glycogen_CI/HT_CIGly_Set2.csv", head=T)
set2$Site<-as.factor(set2$Site)
#make linear model with glycogen as a function of site
fit2 <-lm(g_log~Site, na.action = na.exclude, data=set2)
View(set2)
#make linear model with glycogen as a function of site
fit2 <-lm(P_Glycogen_DW~Site, na.action = na.exclude, data=set2)
summary(fit2) #model summary
require(car)
#ANOVA to see if there are any significant differences in glycogen among sites
Anova(fit2, type="III")
#ANOVA significant by site, so move on to tukey test
#Tukey's post-hoc test compares all sites against one another individually, so I can see which sites differed from others in glycogen
test <- glht(fit2, linfct = mcp(Site = "Tukey"))
#load packages needed
library(car)
library(rcompanion)
library(multcomp)
#ANOVA significant by site, so move on to tukey test
#Tukey's post-hoc test compares all sites against one another individually, so I can see which sites differed from others in glycogen
test <- glht(fit2, linfct = mcp(Site = "Tukey"))
summary(test)
##Condition Index - Set 2
#Based on normality assessments (see R file normalityTests and/or Normality excel file), I'll be using the untransformed condition index variable in analysis
#make linear model with condition index as a function of site
fit2 <-lm(ConditionIndex~Site, na.action = na.exclude, data=set2)
summary(fit2) #model summary
require(car)
#ANOVA to see if there are any significant differences in CI among sites
Anova(fit2, type="III")
#ANOVA is significant by site, so move on to Tukey's post-hoc test
#Tukey's post-hoc test compares all sites against one another individually, so I can see which sites differed from others in condition index
test <- glht(fit2, linfct = mcp(Site = "Tukey"))
summary(test)
#make linear model with glycogen as a function of site
fit2 <-lm(P_Glycogen_DW~Site, na.action = na.exclude, data=set2)
summary(fit2) #model summary
require(car)
#ANOVA to see if there are any significant differences in glycogen among sites
Anova(fit2, type="III")
##Condition Index - Set 2
#Based on normality assessments (see R file normalityTests and/or Normality excel file), I'll be using the untransformed condition index variable in analysis
#make linear model with condition index as a function of site
fit2 <-lm(ConditionIndex~Site, na.action = na.exclude, data=set2)
summary(fit2) #model summary
require(car)
#ANOVA to see if there are any significant differences in CI among sites
Anova(fit2, type="III")
#ANOVA is significant by site, so move on to Tukey's post-hoc test
#Tukey's post-hoc test compares all sites against one another individually, so I can see which sites differed from others in condition index
test <- glht(fit2, linfct = mcp(Site = "Tukey"))
summary(test)
##FRAP - set 2
#Load data
frap<-read.csv("~/Desktop/PutnamLab/Repositories/Oysters_EnvHistory/data/FRAP/HT_FRAP_bothSets_042320.csv", head=T)
frap$Treatment<-as.factor(frap$Treatment)
View(frap)
#subset data set into FRAP set 1 & 2
frap1 = frap[1:56,]
frap2 = frap[57:112,]
##FRAP set 2
##In this model, I have two independent variables - treatment and site.
#making full model with treatment and site; not using interactive method (treatment*site) because Emily said that it was okay to remove interaction term, provided models were not significantly different
##Comparing the model with interaction term to model without interaction term
#model w/o interaction term
LME_FRAP <-lme(test_FRAP~Treatment+Site,random = ~1|Replicate, data=frap2)
require(car)
library(car)
library(rcompanion)
library(multcomp)
##FRAP set 2
##In this model, I have two independent variables - treatment and site.
#making full model with treatment and site; not using interactive method (treatment*site) because Emily said that it was okay to remove interaction term, provided models were not significantly different
##Comparing the model with interaction term to model without interaction term
#model w/o interaction term
LME_FRAP <-lme(test_FRAP~Treatment+Site,random = ~1|Replicate, data=frap2)
library(nlme)
##FRAP set 2
##In this model, I have two independent variables - treatment and site.
#making full model with treatment and site; not using interactive method (treatment*site) because Emily said that it was okay to remove interaction term, provided models were not significantly different
##Comparing the model with interaction term to model without interaction term
#model w/o interaction term
LME_FRAP <-lme(test_FRAP~Treatment+Site,random = ~1|Replicate, data=frap2)
require(car)
Anova(LME_FRAP, type="III") ##no significance
#model w/ interaction term
LME <-lme(test_FRAP~Treatment*Site,random = ~1|Replicate, data=frap2)
require(car)
Anova(LME, type="III") #no significance - site a little sig.
#Comparing model with interaction term to model w/o interaction term
anova(LME_FRAP, LME)
##Proceed with model w/o interaction term
LME_FRAP <-lme(test_FRAP~Treatment+Site,random = ~1|Replicate, data=frap2)
require(car)
Anova(LME_FRAP, type="III") ##no signifiance
MR2_CI_mean = mean(MR2$ConditionIndex)
MR2_CI_se = std.error(MR2$ConditionIndex)
PR2_CI_mean = mean(PR2$ConditionIndex)
PR2_CI_se = std.error(PR2$ConditionIndex)
UC2_CI_mean = mean(UC2$ConditionIndex)
UC2_CI_se = std.error(UC2$ConditionIndex)
VP2_CI_mean = mean(VP2$ConditionIndex)
VP2_CI_se = std.error(VP2$ConditionIndex)
#make a data frame with the name (categorical variable - Site), the values (average of physiological measurements from each site),
#and se (standard error for each site)
set2CI = data.frame(name=c("Merroir", "Piankatank", "Urbanna Creek", "VIMS Pier"),
value = c(MR2_CI_mean, PR2_CI_mean, UC2_CI_mean, VP2_CI_mean), # mean
se = c(MR2_CI_se, PR2_CI_se, UC2_CI_se, VP2_CI_se)) # std error
#Bar plot of CI set2
p_CISet2 <- ggplot(set2CI, aes(x=name, y=value)) + # establishing whats going on in plot
geom_bar(stat = "identity", fill="gray", color = "black", size = 0.3, width = 0.5) +  # bar plot in these sizes, shapes, colors, etc
geom_errorbar(aes(x=name, ymin = value - se, ymax = value + se), colour = "black", width = 0.1, alpha = 0.9, size = 0.5) + #error bar in specific size, shape, color, etc
#geom_text(label = c("A", "B", "AB", "C"), aes(y = c(0.15, 0.15, 0.15, 0.86), x = name), size = 4) + # adding letters to indicate significance
ylab("Condition Index") + xlab("") + # x and y axes titles
#ggtitle("Condition Index Set2") + # figure title
scale_y_continuous(expand = c(0,0)) + # making the bars sit flush with the x axis
theme_minimal() + # setting background theme
theme(axis.line = element_line(), axis.text.x = element_text(size = 12, angle=30, hjust = 1, colour = "black"), axis.text.y = element_text(size=12, color = "black"), axis.title.y = element_text(size = 15)) #adding specific lines, sizes, degrees, etc for the axes texts and labels
p_CISet2
#Bar plot of CI set2
p_CISet2 <- ggplot(set2CI, aes(x=name, y=value)) + # establishing whats going on in plot
geom_bar(stat = "identity", fill="gray", color = "black", size = 0.3, width = 0.5) +  # bar plot in these sizes, shapes, colors, etc
geom_errorbar(aes(x=name, ymin = value - se, ymax = value + se), colour = "black", width = 0.1, alpha = 0.9, size = 0.5) + #error bar in specific size, shape, color, etc
geom_text(label = c("AB", "AB", "A", "B"), aes(y = c(0.15, 0.15, 0.15, 0.86), x = name), size = 4) + # adding letters to indicate significance
ylab("Condition Index") + xlab("") + # x and y axes titles
#ggtitle("Condition Index Set2") + # figure title
scale_y_continuous(expand = c(0,0)) + # making the bars sit flush with the x axis
theme_minimal() + # setting background theme
theme(axis.line = element_line(), axis.text.x = element_text(size = 12, angle=30, hjust = 1, colour = "black"), axis.text.y = element_text(size=12, color = "black"), axis.title.y = element_text(size = 15)) #adding specific lines, sizes, degrees, etc for the axes texts and labels
p_CISet2
#Bar plot of CI set2
p_CISet2 <- ggplot(set2CI, aes(x=name, y=value)) + # establishing whats going on in plot
geom_bar(stat = "identity", fill="gray", color = "black", size = 0.3, width = 0.5) +  # bar plot in these sizes, shapes, colors, etc
geom_errorbar(aes(x=name, ymin = value - se, ymax = value + se), colour = "black", width = 0.1, alpha = 0.9, size = 0.5) + #error bar in specific size, shape, color, etc
geom_text(label = c("AB", "AB", "A", "B"), aes(y = c(5.5, 5.5, 6.5, 5.3), x = name), size = 4) + # adding letters to indicate significance
ylab("Condition Index") + xlab("") + # x and y axes titles
#ggtitle("Condition Index Set2") + # figure title
scale_y_continuous(expand = c(0,0)) + # making the bars sit flush with the x axis
theme_minimal() + # setting background theme
theme(axis.line = element_line(), axis.text.x = element_text(size = 12, angle=30, hjust = 1, colour = "black"), axis.text.y = element_text(size=12, color = "black"), axis.title.y = element_text(size = 15)) #adding specific lines, sizes, degrees, etc for the axes texts and labels
p_CISet2
#Bar plot of CI set2
p_CISet2 <- ggplot(set2CI, aes(x=name, y=value)) + # establishing whats going on in plot
geom_bar(stat = "identity", fill="gray", color = "black", size = 0.3, width = 0.5) +  # bar plot in these sizes, shapes, colors, etc
geom_errorbar(aes(x=name, ymin = value - se, ymax = value + se), colour = "black", width = 0.1, alpha = 0.9, size = 0.5) + #error bar in specific size, shape, color, etc
geom_text(label = c("AB", "AB", "A", "B"), aes(y = c(5.7, 5.7, 6.6, 5.25), x = name), size = 4) + # adding letters to indicate significance
ylab("Condition Index") + xlab("") + # x and y axes titles
#ggtitle("Condition Index Set2") + # figure title
scale_y_continuous(expand = c(0,0)) + # making the bars sit flush with the x axis
theme_minimal() + # setting background theme
theme(axis.line = element_line(), axis.text.x = element_text(size = 12, angle=30, hjust = 1, colour = "black"), axis.text.y = element_text(size=12, color = "black"), axis.title.y = element_text(size = 15)) #adding specific lines, sizes, degrees, etc for the axes texts and labels
p_CISet2
ggsave("~/Desktop/PutnamLab/Repositories/Oysters_EnvHistory/output/Phys/HT_ConditionIndex_Set2.pdf", p_CISet2, width = 8, height = 6)
#Bar plot of CI set2
p_CISet2 <- ggplot(set2CI, aes(x=name, y=value)) + # establishing whats going on in plot
geom_bar(stat = "identity", fill="gray", color = "black", size = 0.3, width = 0.5) +  # bar plot in these sizes, shapes, colors, etc
geom_errorbar(aes(x=name, ymin = value - se, ymax = value + se), colour = "black", width = 0.1, alpha = 0.9, size = 0.5) + #error bar in specific size, shape, color, etc
geom_text(label = c("AB", "AB", "A", "B"), aes(y = c(5.7, 5.7, 6.6, 5.25), x = name), size = 4) + # adding letters to indicate significance
ylab("Condition Index") + xlab("") + # x and y axes titles
#ggtitle("Condition Index Set2") + # figure title
scale_y_continuous(expand = c(0,0)) + # making the bars sit flush with the x axis
expand_limits(y = 10) + # or some other arbitrarily large number
theme_minimal() + # setting background theme
theme(axis.line = element_line(), axis.text.x = element_text(size = 12, angle=30, hjust = 1, colour = "black"), axis.text.y = element_text(size=12, color = "black"), axis.title.y = element_text(size = 15)) #adding specific lines, sizes, degrees, etc for the axes texts and labels
p_CISet2
#Bar plot of CI set2
p_CISet2 <- ggplot(set2CI, aes(x=name, y=value)) + # establishing whats going on in plot
geom_bar(stat = "identity", fill="gray", color = "black", size = 0.3, width = 0.5) +  # bar plot in these sizes, shapes, colors, etc
geom_errorbar(aes(x=name, ymin = value - se, ymax = value + se), colour = "black", width = 0.1, alpha = 0.9, size = 0.5) + #error bar in specific size, shape, color, etc
geom_text(label = c("AB", "AB", "A", "B"), aes(y = c(5.7, 5.7, 6.6, 5.25), x = name), size = 4) + # adding letters to indicate significance
ylab("Condition Index") + xlab("") + # x and y axes titles
#ggtitle("Condition Index Set2") + # figure title
scale_y_continuous(expand = c(0,0)) + # making the bars sit flush with the x axis
expand_limits(y = 7) + # or some other arbitrarily large number
theme_minimal() + # setting background theme
theme(axis.line = element_line(), axis.text.x = element_text(size = 12, angle=30, hjust = 1, colour = "black"), axis.text.y = element_text(size=12, color = "black"), axis.title.y = element_text(size = 15)) #adding specific lines, sizes, degrees, etc for the axes texts and labels
p_CISet2
#Bar plot of CI set2
p_CISet2 <- ggplot(set2CI, aes(x=name, y=value)) + # establishing whats going on in plot
geom_bar(stat = "identity", fill="gray", color = "black", size = 0.3, width = 0.5) +  # bar plot in these sizes, shapes, colors, etc
geom_errorbar(aes(x=name, ymin = value - se, ymax = value + se), colour = "black", width = 0.1, alpha = 0.9, size = 0.5) + #error bar in specific size, shape, color, etc
geom_text(label = c("AB", "AB", "A", "B"), aes(y = c(5.7, 5.7, 6.6, 5.25), x = name), size = 4) + # adding letters to indicate significance
ylab("Condition Index") + xlab("") + # x and y axes titles
#ggtitle("Condition Index Set2") + # figure title
scale_y_continuous(expand = c(0,0)) + # making the bars sit flush with the x axis
expand_limits(y = 7) +
theme_minimal() + # setting background theme
theme(axis.line = element_line(), axis.text.x = element_text(size = 12, angle=30, hjust = 1, colour = "black"), axis.text.y = element_text(size=12, color = "black"), axis.title.y = element_text(size = 15)) #adding specific lines, sizes, degrees, etc for the axes texts and labels
p_CISet2
ggsave("~/Desktop/PutnamLab/Repositories/Oysters_EnvHistory/output/Phys/HT_ConditionIndex_Set2.pdf", p_CISet2, width = 8, height = 6)
##FRAP - set 2
p_FRAPSet2 <- ggplot(data = FRAP, aes(x=Site, y=FRAPavg2)) +
geom_bar(stat = "identity", position = "dodge", width = 0.75) +
geom_errorbar(aes(ymin = FRAPavg2 - FRAPse2, ymax = FRAPavg2 + FRAPse2), width = 0.2, position = position_dodge(0.75), size = 0.5) +
ylab("Total antioxidant potential (μmol/g of tissue)") + xlab("") + # titles for x and y axes
#ggtitle("Total antioxidant potential (μmol/g of tissue) set2") +
scale_y_continuous(expand = c(0,0)) +
theme_minimal() +
theme(axis.line = element_line(), axis.text.x = element_text(size = 12, angle = 30, hjust = 1, colour = "black"), axis.text.y = element_text(size=12, colour = "black"), axis.title.y = element_text(size = 15))
p_FRAPSet2
ggsave("~/Desktop/PutnamLab/Repositories/Oysters_EnvHistory/output/Phys/HT_FRAP_Set2.png", p_FRAPSet2, width = 8, height = 6)
library(devtools)
library(ggplot2)
library(ggpubr)
library(gridExtra)
library("plotrix")
# install.packages("devtools")---- didn't work once
#devtools::install_github("tidyverse/reprex")
if("lubridate" %in% rownames(installed.packages()) == 'FALSE') install.packages('lubridate')
if("tidyverse" %in% rownames(installed.packages()) == 'FALSE') install.packages('tidyverse')
if("emmeans" %in% rownames(installed.packages()) == 'FALSE') install.packages('emmeans')
if("gridExtra" %in% rownames(installed.packages()) == 'FALSE') install.packages('gridExtra')
library(lubridate)
library(tidyverse)
library(emmeans)
library(gridExtra)
# Read in data
WQ <- read.csv("~/Desktop/PutnamLab/Repositories/Oysters_EnvHistory/data/WQ/HT_FieldWaterQuality.csv", header = T)
# Format data
WQ$Date <- parse_date(WQ$Date, "%m/%d/%y")
## Plot WQ variables
Temps <- ggplot(WQ, aes(x=Date, y=Temperature)) +
geom_line(aes(color = Site), size = 1)+
scale_color_manual(values = c("mediumpurple3", "darkorange2", "palegreen3", "dodgerblue2", "goldenrod2")) +
ylab("Temperature °C") +
theme_linedraw()
Temps
## Plot WQ variables
Temps <- ggplot(WQ, aes(x=Date, y=Temperature)) +
geom_line(aes(color = Site), size = 1)+
scale_color_manual(values = c("mediumpurple3", "darkorange2", "palegreen3", "dodgerblue2", "goldenrod2")) +
ylab("Temperature °C") +
theme_linedraw()
Temps
Sal <- ggplot(WQ, aes(x=Date, y=Salinity)) +
geom_line(aes(color = Site), size = 1)+
scale_color_manual(values = c("mediumpurple3", "darkorange2", "palegreen3", "dodgerblue2", "goldenrod2")) +
ylab("Salinity psu") +
theme_linedraw()
Sal
## Plot WQ variables
Temps <- ggplot(WQ, aes(x=Date, y=Temperature)) +
geom_line(aes(color = Site), size = 1)+
scale_color_manual(values = c("mediumpurple3", "darkorange2", "palegreen3", "dodgerblue2", "goldenrod2")) +
ylab("Temperature (°C)") +
theme_linedraw()
Temps
Sal <- ggplot(WQ, aes(x=Date, y=Salinity)) +
geom_line(aes(color = Site), size = 1)+
scale_color_manual(values = c("mediumpurple3", "darkorange2", "palegreen3", "dodgerblue2", "goldenrod2")) +
ylab("Salinity (psu)") +
theme_linedraw()
Sal
pH <- ggplot(WQ, aes(x=Date, y=specpH)) +
geom_line(aes(color = Site), size = 1)+
scale_color_manual(values = c("mediumpurple3", "darkorange2", "palegreen3", "dodgerblue2", "goldenrod2")) +
ylab("pH Total") +
theme_linedraw()
pH
DO <- ggplot(WQ, aes(x=Date, y=DO_mg)) +
geom_line(aes(color = Site), size = 1)+
scale_color_manual(values = c("mediumpurple3", "darkorange2", "palegreen3", "dodgerblue2", "goldenrod2")) +
ylab("Dissolved oxygen (mg/mL)") +
theme_linedraw()
DO
TA <- ggplot(WQ, aes(x=Date, y=TA)) +
geom_line(aes(color = Site), size = 1)+
scale_color_manual(values = c("mediumpurple3", "darkorange2", "palegreen3", "dodgerblue2", "goldenrod2")) +
ylab("umol/kg") +
theme_linedraw()
TA <- ggplot(WQ, aes(x=Date, y=TA)) +
geom_line(aes(color = Site), size = 1)+
scale_color_manual(values = c("mediumpurple3", "darkorange2", "palegreen3", "dodgerblue2", "goldenrod2")) +
ylab("umol/kg") +
theme_linedraw()
TA
TA <- ggplot(WQ, aes(x=Date, y=TA)) +
geom_line(aes(color = Site), size = 1)+
scale_color_manual(values = c("mediumpurple3", "darkorange2", "palegreen3", "dodgerblue2", "goldenrod2")) +
ylab("Total alkalinity (μmol/kg)") +
theme_linedraw()
TA
pCO2 <- ggplot(WQ, aes(x=Date, y=pCO2)) +
geom_line(aes(color = Site), size = 1)+
scale_color_manual(values = c("mediumpurple3", "darkorange2", "palegreen3", "dodgerblue2", "goldenrod2")) +
ylab("pCO2 (μatm)") +
theme_linedraw()
pCO2
Ca <- ggplot(WQ, aes(x=Date, y=Omega_Ca)) +
geom_line(aes(color = Site), size = 1)+
scale_color_manual(values = c("mediumpurple3", "darkorange2", "palegreen3", "dodgerblue2", "goldenrod2")) +
ylab("Ω Calcite") +
theme_linedraw()
Ca
# Save plots
ggsave("~/Desktop/PutnamLab/Repositories/Oysters_EnvHistory/output/FieldWQ/Field_Temperature.pdf", plot = Temps, width = 8, height = 4)
ggsave("~/Desktop/PutnamLab/Repositories/Oysters_EnvHistory/output/FieldWQ/Field_Salinity.pdf", plot = Sal, width = 8, height = 4)
ggsave("~/Desktop/PutnamLab/Repositories/Oysters_EnvHistory/output/FieldWQ/Field_pH.pdf", plot = pH, width = 8, height = 4)
ggsave("~/Desktop/PutnamLab/Repositories/Oysters_EnvHistory/output/FieldWQ/Field_DO.pdf", plot = DO, width = 8, height = 4)
ggsave("~/Desktop/PutnamLab/Repositories/Oysters_EnvHistory/output/FieldWQ/Field_TA.pdf", plot = TA, width = 8, height = 4)
ggsave("~/Desktop/PutnamLab/Repositories/Oysters_EnvHistory/output/FieldWQ/Field_pCO2.pdf", plot = pCO2, width = 8, height = 4)
ggsave("~/Desktop/PutnamLab/Repositories/Oysters_EnvHistory/output/FieldWQ/Field_OmegaCa.pdf", plot = Ca, width = 8, height = 4)
# as pngs
ggsave("~/Desktop/PutnamLab/Repositories/Oysters_EnvHistory/output/FieldWQ/Field_Temperature.png", plot = Temps, width = 8, height = 4)
ggsave("~/Desktop/PutnamLab/Repositories/Oysters_EnvHistory/output/FieldWQ/Field_Salinity.png", plot = Sal, width = 8, height = 4)
ggsave("~/Desktop/PutnamLab/Repositories/Oysters_EnvHistory/output/FieldWQ/Field_pH.png", plot = pH, width = 8, height = 4)
ggsave("~/Desktop/PutnamLab/Repositories/Oysters_EnvHistory/output/FieldWQ/Field_DO.png", plot = DO, width = 8, height = 4)
ggsave("~/Desktop/PutnamLab/Repositories/Oysters_EnvHistory/output/FieldWQ/Field_TA.png", plot = TA, width = 8, height = 4)
ggsave("~/Desktop/PutnamLab/Repositories/Oysters_EnvHistory/output/FieldWQ/Field_pCO2.png", plot = pCO2, width = 8, height = 4)
ggsave("~/Desktop/PutnamLab/Repositories/Oysters_EnvHistory/output/FieldWQ/Field_OmegaCa.png", plot = Ca, width = 8, height = 4)
